// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: redesocial.proto

package clientes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RedeSocial_Postar_FullMethodName             = "/redesocial.RedeSocial/Postar"
	RedeSocial_Seguir_FullMethodName             = "/redesocial.RedeSocial/Seguir"
	RedeSocial_EnviarMensagem_FullMethodName     = "/redesocial.RedeSocial/EnviarMensagem"
	RedeSocial_ReceberPostagens_FullMethodName   = "/redesocial.RedeSocial/ReceberPostagens"
	RedeSocial_SincronizarRelogio_FullMethodName = "/redesocial.RedeSocial/SincronizarRelogio"
)

// RedeSocialClient is the client API for RedeSocial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedeSocialClient interface {
	Postar(ctx context.Context, in *Postagem, opts ...grpc.CallOption) (*Ack, error)
	Seguir(ctx context.Context, in *SeguirRequest, opts ...grpc.CallOption) (*Ack, error)
	EnviarMensagem(ctx context.Context, in *Mensagem, opts ...grpc.CallOption) (*Ack, error)
	ReceberPostagens(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Postagem], error)
	SincronizarRelogio(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*ClockReply, error)
}

type redeSocialClient struct {
	cc grpc.ClientConnInterface
}

func NewRedeSocialClient(cc grpc.ClientConnInterface) RedeSocialClient {
	return &redeSocialClient{cc}
}

func (c *redeSocialClient) Postar(ctx context.Context, in *Postagem, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RedeSocial_Postar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redeSocialClient) Seguir(ctx context.Context, in *SeguirRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RedeSocial_Seguir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redeSocialClient) EnviarMensagem(ctx context.Context, in *Mensagem, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, RedeSocial_EnviarMensagem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redeSocialClient) ReceberPostagens(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Postagem], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RedeSocial_ServiceDesc.Streams[0], RedeSocial_ReceberPostagens_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, Postagem]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RedeSocial_ReceberPostagensClient = grpc.ServerStreamingClient[Postagem]

func (c *redeSocialClient) SincronizarRelogio(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*ClockReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClockReply)
	err := c.cc.Invoke(ctx, RedeSocial_SincronizarRelogio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedeSocialServer is the server API for RedeSocial service.
// All implementations must embed UnimplementedRedeSocialServer
// for forward compatibility.
type RedeSocialServer interface {
	Postar(context.Context, *Postagem) (*Ack, error)
	Seguir(context.Context, *SeguirRequest) (*Ack, error)
	EnviarMensagem(context.Context, *Mensagem) (*Ack, error)
	ReceberPostagens(*StreamRequest, grpc.ServerStreamingServer[Postagem]) error
	SincronizarRelogio(context.Context, *ClockRequest) (*ClockReply, error)
	mustEmbedUnimplementedRedeSocialServer()
}

// UnimplementedRedeSocialServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRedeSocialServer struct{}

func (UnimplementedRedeSocialServer) Postar(context.Context, *Postagem) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Postar not implemented")
}
func (UnimplementedRedeSocialServer) Seguir(context.Context, *SeguirRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Seguir not implemented")
}
func (UnimplementedRedeSocialServer) EnviarMensagem(context.Context, *Mensagem) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarMensagem not implemented")
}
func (UnimplementedRedeSocialServer) ReceberPostagens(*StreamRequest, grpc.ServerStreamingServer[Postagem]) error {
	return status.Errorf(codes.Unimplemented, "method ReceberPostagens not implemented")
}
func (UnimplementedRedeSocialServer) SincronizarRelogio(context.Context, *ClockRequest) (*ClockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SincronizarRelogio not implemented")
}
func (UnimplementedRedeSocialServer) mustEmbedUnimplementedRedeSocialServer() {}
func (UnimplementedRedeSocialServer) testEmbeddedByValue()                    {}

// UnsafeRedeSocialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedeSocialServer will
// result in compilation errors.
type UnsafeRedeSocialServer interface {
	mustEmbedUnimplementedRedeSocialServer()
}

func RegisterRedeSocialServer(s grpc.ServiceRegistrar, srv RedeSocialServer) {
	// If the following call pancis, it indicates UnimplementedRedeSocialServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RedeSocial_ServiceDesc, srv)
}

func _RedeSocial_Postar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Postagem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedeSocialServer).Postar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedeSocial_Postar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedeSocialServer).Postar(ctx, req.(*Postagem))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedeSocial_Seguir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeguirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedeSocialServer).Seguir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedeSocial_Seguir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedeSocialServer).Seguir(ctx, req.(*SeguirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedeSocial_EnviarMensagem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mensagem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedeSocialServer).EnviarMensagem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedeSocial_EnviarMensagem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedeSocialServer).EnviarMensagem(ctx, req.(*Mensagem))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedeSocial_ReceberPostagens_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RedeSocialServer).ReceberPostagens(m, &grpc.GenericServerStream[StreamRequest, Postagem]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RedeSocial_ReceberPostagensServer = grpc.ServerStreamingServer[Postagem]

func _RedeSocial_SincronizarRelogio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedeSocialServer).SincronizarRelogio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedeSocial_SincronizarRelogio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedeSocialServer).SincronizarRelogio(ctx, req.(*ClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedeSocial_ServiceDesc is the grpc.ServiceDesc for RedeSocial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedeSocial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redesocial.RedeSocial",
	HandlerType: (*RedeSocialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Postar",
			Handler:    _RedeSocial_Postar_Handler,
		},
		{
			MethodName: "Seguir",
			Handler:    _RedeSocial_Seguir_Handler,
		},
		{
			MethodName: "EnviarMensagem",
			Handler:    _RedeSocial_EnviarMensagem_Handler,
		},
		{
			MethodName: "SincronizarRelogio",
			Handler:    _RedeSocial_SincronizarRelogio_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceberPostagens",
			Handler:       _RedeSocial_ReceberPostagens_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "redesocial.proto",
}
